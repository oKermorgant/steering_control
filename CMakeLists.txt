cmake_minimum_required(VERSION 3.0.2)
project(steering_control)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_BUILD_TYPE Debug)

find_package(catkin REQUIRED COMPONENTS
roscpp
nav_msgs
sensor_msgs
tf2_ros
urdf
costmap_2d
dwa_local_planner
)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
catkin_package(
INCLUDE_DIRS include ${EIGEN3_INCLUDE_DIRS}
CATKIN_DEPENDS
roscpp
nav_msgs
sensor_msgs
tf2_ros
urdf
costmap_2d
dwa_local_planner
)

include_directories(
  include
  ${catkin_INCLUDE_DIRS}
)

# generic local_planner + local costmap (eg control lib)
add_library(control src/control_nodes/control.cpp)
target_include_directories(control PRIVATE ${catkin_INCLUDE_DIRS})
target_link_libraries(control ${catkin_LIBRARIES} yaml-cpp)

# Example on how to use DWA class / plugin into an independant control node
add_executable(dwa_unicycle src/control_nodes/dwa_unicycle.cpp)
target_include_directories(dwa_unicycle PRIVATE ${catkin_INCLUDE_DIRS})
target_link_libraries(dwa_unicycle control)

# Example of a stupid planner that aims at the goal and does not care about walls
add_executable(greedy_nowalls src/greedy_nowalls_plugin.cpp src/control_nodes/greedy_nowalls.cpp)
target_include_directories(greedy_nowalls PRIVATE ${catkin_INCLUDE_DIRS})
target_link_libraries(greedy_nowalls control)

add_executable(dwa_bicycle src/dwa_bicycle_plugin.cpp src/control_nodes/dwa_bicycle.cpp)
target_include_directories(dwa_bicycle PRIVATE ${catkin_INCLUDE_DIRS})
target_link_libraries(dwa_bicycle control)

add_executable(dwa_twosteering src/dwa_twosteering_plugin.cpp src/control_nodes/dwa_twosteering.cpp)
target_include_directories(dwa_twosteering PRIVATE ${catkin_INCLUDE_DIRS})
target_link_libraries(dwa_twosteering control)

add_executable(beta_bicycle src/beta_bicycle.cpp)
target_include_directories(beta_bicycle PRIVATE ${catkin_INCLUDE_DIRS})
target_link_libraries(beta_bicycle control)

add_executable(beta1_twosteering src/beta1_twosteering.cpp)
target_include_directories(beta1_twosteering PRIVATE ${catkin_INCLUDE_DIRS})
target_link_libraries(beta1_twosteering control)

add_executable(beta2_twosteering src/beta2_twosteering.cpp)
target_include_directories(beta2_twosteering PRIVATE ${catkin_INCLUDE_DIRS})
target_link_libraries(beta2_twosteering control)
